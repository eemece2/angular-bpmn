{"version":3,"sources":["bpmn.directive.js","event.directive.js","end-event.directive.js","exclusive-gateway.directive.js","gateway.directive.js","lane.directive.js","participant.directive.js","parallel-gateway.directive.js","process.directive.js","sequence-flow.directive.js","receive-task.directive.js","svg-defs.directive.js","rounder.service.js","svg-symbols.directive.js","script-task.directive.js","task.directive.js","send-task.directive.js","service-task.directive.js","start-event.directive.js","user-task.directive.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AFzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AExBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AP5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AQ3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;APxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AEhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AEhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AI3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"angular-bpmn.js","sourcesContent":["angular.module('bpmn', ['bpmn.templates']).\ndirective('bpmn', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            \"definitions\": \"=\",\n            w: \"=\",\n            h: \"=\"\n        },\n        transclude: true,\n        replace: true,\n        templateUrl: 'js/bpmn.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'bpmn',\n        bindToController: true,\n        controller: function($scope) {\n        }\n    };\n});\n\n","(function(module) {\ntry {\n  module = angular.module('bpmn.templates');\n} catch (e) {\n  module = angular.module('bpmn.templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('js/event.directive.html',\n    '<g ng:attr:transform=\"translate({{event.bounds.x}},{{event.bounds.y}})\" >\\n' +\n    '    <circle x=\"0\" y=\"0\"\\n' +\n    '        ng:attr:cx=\"{{event.bounds.width / 2}}\" ng:attr:cy=\"{{event.bounds.height / 2}}\"\\n' +\n    '        ng:attr:r=\"{{event.bounds.width / 2}}\"\\n' +\n    '        class=\"event event-{{event.type}}\"\\n' +\n    '    ></circle>\\n' +\n    '    <text ng:attr:transform=\"translate({{event.label.x}},{{event.label.y}}) translate(0,15)\">{{event.event.$.name}}</text>\\n' +\n    '</g>\\n' +\n    '');\n}]);\n})();\n","angular.module('bpmn').\ndirective('endEvent', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            event: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/event.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'event',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.event.di.Bounds[0].$;\n            this.type = 'end';\n            // Label\n            if(this.event.di.BPMNLabel) {\n                this.label = this.event.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('exclusiveGateway', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            gateway: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/gateway.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'gateway',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.gateway.di.Bounds[0].$;\n            this.type = 'exclusive';\n            // Label\n            if(this.gateway.di.BPMNLabel) {\n                this.label = this.gateway.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            }\n        }\n    };\n});\n","(function(module) {\ntry {\n  module = angular.module('bpmn.templates');\n} catch (e) {\n  module = angular.module('bpmn.templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('js/gateway.directive.html',\n    '<g ng:attr:transform=\"translate({{gateway.bounds.x}},{{gateway.bounds.y}})\" >\\n' +\n    '    <polygon x=\"0\" y=\"0\"\\n' +\n    '        ng:attr:points=\"\\n' +\n    '           {{gateway.bounds.width / 2}},0\\n' +\n    '           {{gateway.bounds.width}},{{gateway.bounds.height / 2}}\\n' +\n    '           {{gateway.bounds.width / 2}},{{gateway.bounds.height}}\\n' +\n    '           0,{{gateway.bounds.height / 2}}\\n' +\n    '           \"\\n' +\n    '        class=\"gateway\"\\n' +\n    '        ng-class=\"gateway.type\"\\n' +\n    '    ></polygon>\\n' +\n    '    <use ng:attr:xlink:href=\"{{\\'#simbol-\\'+gateway.type}}\" x=\"10\" y=\"10\"/>\\n' +\n    '    <text ng:attr:transform=\"translate({{gateway.label.x}},{{gateway.label.y}}) translate(0,15)\">{{gateway.gateway.$.name}}</text>\\n' +\n    '</g>\\n' +\n    '');\n}]);\n})();\n","(function(module) {\ntry {\n  module = angular.module('bpmn.templates');\n} catch (e) {\n  module = angular.module('bpmn.templates', []);\n}\nmodule.run(['$templateCache', function($templateCache) {\n  $templateCache.put('js/lane.directive.html',\n    '<g ng:attr:transform=\"translate({{lane.bounds.x}},{{lane.bounds.y}})\" >\\n' +\n    '    <rect x=\"0\" y=\"0\"\\n' +\n    '        ng:attr:width=\"{{lane.bounds.width}}\" ng:attr:height=\"{{lane.bounds.height}}\"\\n' +\n    '        class=\"lane\"\\n' +\n    '    ></rect>\\n' +\n    '    <text class=\"lane-label\" ng:attr:transform=\"rotate(-90) translate({{lane.label.x}},{{lane.label.y}})\">{{lane.lane.$.name}}</text>\\n' +\n    '</g>\\n' +\n    '');\n}]);\n})();\n","angular.module('bpmn').\ndirective('participant', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            participant: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/participant.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'participant',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.participant.di.Bounds[0].$;\n            // Label\n            this.label = {\n                'x': - this.bounds.height / 2,\n                'y': 20\n            };\n\n            // TODO: isHorizontal: false\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('parallelGateway', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            gateway: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/gateway.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'gateway',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.gateway.di.Bounds[0].$;\n            this.type = 'parallel';\n            // Label\n            if(this.gateway.di.BPMNLabel) {\n                this.label = this.gateway.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('process', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            \"process\": \"=\",\n            w: \"=\",\n            h: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/process.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'process',\n        bindToController: true,\n        controller: function($scope) {\n        }\n    };\n});\n\n","angular.module('bpmn').\ndirective('sequenceFlow', function(RounderService) {\n    return {\n        restrict: 'E',\n        scope: {\n            sf: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/sequence-flow.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'sf',\n        bindToController: true,\n        controller: function($scope) {\n            // Label\n            if(this.sf.di.BPMNLabel) {\n                this.label = this.sf.di.BPMNLabel[0].Bounds[0].$;\n            }\n            // Waypoints\n            var wpoints = this.sf.di.waypoint;\n            this.wps = 'M' + wpoints[0].$.x + ',' + wpoints[0].$.y;\n            for(var i = 1; i < wpoints.length; i++) {\n                this.wps  += \" L\" + wpoints[i].$.x + \",\" + wpoints[i].$.y;\n            }\n            this.wps = RounderService(this.wps, 8);\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('receiveTask', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            task: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/task.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'task',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.task.di.Bounds[0].$;\n            this.type = 'receive';\n            this.symbol = '#' + this.type + '-task';\n            if(this.task.di.BPMNLabel) {\n                this.label = this.task.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            } else {\n                // TODO: multiline labels (long texts: divide label)\n                var yLabel = this.bounds.height / 2;\n                this.label = { x: 10, y: yLabel, witdh: 80, height: 20 };\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('svgDefs', function() {\n    return {\n        restrict: 'E',\n        scope: {\n        },\n        replace: true,\n        templateUrl: 'js/svg-defs.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'defs',\n        bindToController: true,\n        controller: function() {\n        }\n    };\n});\n\n","angular.module('bpmn').\nfactory('RounderService', function() {\n\n    return roundPathCorners;\n\n    /*****************************************************************************\n    *                                                                            *\n    *  SVG Path Rounding Function                                                *\n    *  Copyright (C) 2014 Yona Appletree                                         *\n    *                                                                            *\n    *  Licensed under the Apache License, Version 2.0 (the \"License\");           *\n    *  you may not use this file except in compliance with the License.          *\n    *  You may obtain a copy of the License at                                   *\n    *                                                                            *\n    *      http://www.apache.org/licenses/LICENSE-2.0                            *\n    *                                                                            *\n    *  Unless required by applicable law or agreed to in writing, software       *\n    *  distributed under the License is distributed on an \"AS IS\" BASIS,         *\n    *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  *\n    *  See the License for the specific language governing permissions and       *\n    *  limitations under the License.                                            *\n    *                                                                            *\n    *****************************************************************************/\n\n    /**\n     * SVG Path rounding function. Takes an input path string and outputs a path\n     * string where all line-line corners have been rounded. Only supports absolute\n     * commands at the moment.\n     *\n     * @param pathString The SVG input path\n     * @param radius The amount to round the corners, either a value in the SVG\n     *               coordinate space, or, if useFractionalRadius is true, a value\n     *               from 0 to 1.\n     * @param useFractionalRadius If true, the curve radius is expressed as a\n     *               fraction of the distance between the point being curved and\n     *               the previous and next points.\n     * @returns A new SVG path string with the rounding\n     */\n    function roundPathCorners(pathString, radius, useFractionalRadius) {\n      function moveTowardsLength(movingPoint, targetPoint, amount) {\n        var width = (targetPoint.x - movingPoint.x);\n        var height = (targetPoint.y - movingPoint.y);\n\n        var distance = Math.sqrt(width*width + height*height);\n\n        return moveTowardsFractional(movingPoint, targetPoint, Math.min(1, amount / distance));\n      }\n      function moveTowardsFractional(movingPoint, targetPoint, fraction) {\n        return {\n          x: movingPoint.x + (targetPoint.x - movingPoint.x)*fraction,\n          y: movingPoint.y + (targetPoint.y - movingPoint.y)*fraction\n        };\n      }\n\n      // Adjusts the ending position of a command\n      function adjustCommand(cmd, newPoint) {\n        if (cmd.length > 2) {\n          cmd[cmd.length - 2] = newPoint.x;\n          cmd[cmd.length - 1] = newPoint.y;\n        }\n      }\n\n      // Gives an {x, y} object for a command's ending position\n      function pointForCommand(cmd) {\n        return {\n          x: parseFloat(cmd[cmd.length - 2]),\n          y: parseFloat(cmd[cmd.length - 1]),\n        };\n      }\n\n      // Split apart the path, handing concatonated letters and numbers\n      var pathParts = pathString\n        .split(/[,\\s]/)\n        .reduce(function(parts, part){\n          var match = part.match(\"([a-zA-Z])(.+)\");\n          if (match) {\n            parts.push(match[1]);\n            parts.push(match[2]);\n          } else {\n            parts.push(part);\n          }\n\n          return parts;\n        }, []);\n\n      // Group the commands with their arguments for easier handling\n      var commands = pathParts.reduce(function(commands, part) {\n        if (parseFloat(part) == part && commands.length) {\n          commands[commands.length - 1].push(part);\n        } else {\n          commands.push([part]);\n        }\n\n        return commands;\n      }, []);\n\n      // The resulting commands, also grouped\n      var resultCommands = [];\n\n      if (commands.length > 1) {\n        var startPoint = pointForCommand(commands[0]);\n\n        // Handle the close path case with a \"virtual\" closing line\n        var virtualCloseLine = null;\n        if (commands[commands.length - 1][0] == \"Z\" && commands[0].length > 2) {\n          virtualCloseLine = [\"L\", startPoint.x, startPoint.y];\n          commands[commands.length - 1] = virtualCloseLine;\n        }\n\n        // We always use the first command (but it may be mutated)\n        resultCommands.push(commands[0]);\n\n        for (var cmdIndex=1; cmdIndex < commands.length; cmdIndex++) {\n          var prevCmd = resultCommands[resultCommands.length - 1];\n\n          var curCmd = commands[cmdIndex];\n\n          // Handle closing case\n          var nextCmd = (curCmd == virtualCloseLine) ? commands[1] : commands[cmdIndex + 1];\n\n          // Nasty logic to decide if this path is a candidite.\n          if (nextCmd && prevCmd && (prevCmd.length > 2) && curCmd[0] == \"L\" && nextCmd.length > 2 && nextCmd[0] == \"L\") {\n            // Calc the points we're dealing with\n            var prevPoint = pointForCommand(prevCmd);\n            var curPoint = pointForCommand(curCmd);\n            var nextPoint = pointForCommand(nextCmd);\n\n            // The start and end of the cuve are just our point moved towards the previous and next points, respectivly\n            var curveStart, curveEnd;\n\n            if (useFractionalRadius) {\n              curveStart = moveTowardsFractional(curPoint, prevCmd.origPoint || prevPoint, radius);\n              curveEnd = moveTowardsFractional(curPoint, nextCmd.origPoint || nextPoint, radius);\n            } else {\n              curveStart = moveTowardsLength(curPoint, prevPoint, radius);\n              curveEnd = moveTowardsLength(curPoint, nextPoint, radius);\n            }\n\n            // Adjust the current command and add it\n            adjustCommand(curCmd, curveStart);\n            curCmd.origPoint = curPoint;\n            resultCommands.push(curCmd);\n\n            // The curve control points are halfway between the start/end of the curve and\n            // the original point\n            var startControl = moveTowardsFractional(curveStart, curPoint, 0.5);\n            var endControl = moveTowardsFractional(curPoint, curveEnd, 0.5);\n\n            // Create the curve\n            var curveCmd = [\"C\", startControl.x, startControl.y, endControl.x, endControl.y, curveEnd.x, curveEnd.y];\n            // Save the original point for fractional calculations\n            curveCmd.origPoint = curPoint;\n            resultCommands.push(curveCmd);\n          } else {\n            // Pass through commands that don't qualify\n            resultCommands.push(curCmd);\n          }\n        }\n\n        // Fix up the starting point and restore the close path if the path was orignally closed\n        if (virtualCloseLine) {\n          var newStartPoint = pointForCommand(resultCommands[resultCommands.length-1]);\n          resultCommands.push([\"Z\"]);\n          adjustCommand(resultCommands[0], newStartPoint);\n        }\n      } else {\n        resultCommands = commands;\n      }\n\n      return resultCommands.reduce(function(str, c){ return str + c.join(\" \") + \" \"; }, \"\");\n    }\n});\n","angular.module('bpmn').\ndirective('svgSymbols', function() {\n    return {\n        restrict: 'E',\n        scope: {\n        },\n        replace: true,\n        templateUrl: 'js/svg-symbols.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'symbols',\n        bindToController: true,\n        controller: function() {\n        }\n    };\n});\n\n","angular.module('bpmn').\ndirective('scriptTask', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            task: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/task.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'task',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.task.di.Bounds[0].$;\n            this.type = 'script';\n            this.symbol = '#' + this.type + '-task';\n            if(this.task.di.BPMNLabel) {\n                this.label = this.task.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            } else {\n                // TODO: multiline labels (long texts: divide label)\n                var yLabel = this.bounds.height / 2;\n                this.label = { x: 10, y: yLabel, witdh: 80, height: 20 };\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('task', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            task: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/task.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'task',\n        bindToController: true,\n        controller: function() {\n            this.prueba = 5;\n            this.bounds = this.task.di.Bounds[0].$;\n            this.type = '';\n            this.symbol = '';\n            if(this.task.di.BPMNLabel) {\n                this.label = this.task.di.BPMNLabel[0].Bounds[0].$;\n            } else {\n                // TODO: multiline labels (long texts: divide label)\n                var yLabel = this.bounds.height / 2;\n                this.label = { x: 10, y: yLabel, witdh: 80, height: 20 };\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('sendTask', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            task: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/task.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'task',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.task.di.Bounds[0].$;\n            this.type = 'send';\n            this.symbol = '#' + this.type + '-task';\n            if(this.task.di.BPMNLabel) {\n                this.label = this.task.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            } else {\n                // TODO: multiline labels (long texts: divide label)\n                var yLabel = this.bounds.height / 2;\n                this.label = { x: 10, y: yLabel, witdh: 80, height: 20 };\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('serviceTask', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            task: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/task.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'task',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.task.di.Bounds[0].$;\n            this.type = 'service';\n            this.symbol = '#' + this.type + '-task';\n            if(this.task.di.BPMNLabel) {\n                this.label = this.task.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            } else {\n                // TODO: multiline labels (long texts: divide label)\n                var yLabel = this.bounds.height / 2;\n                this.label = { x: 10, y: yLabel, witdh: 80, height: 20 };\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('startEvent', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            event: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/event.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'event',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.event.di.Bounds[0].$;\n            this.type = 'start';\n            // Label\n            if(this.event.di.BPMNLabel) {\n                this.label = this.event.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            }\n        }\n    };\n});\n","angular.module('bpmn').\ndirective('userTask', function() {\n    return {\n        restrict: 'E',\n        scope: {\n            task: \"=\"\n        },\n        replace: true,\n        templateUrl: 'js/task.directive.html',\n        templateNamespace: 'svg',\n        controllerAs: 'task',\n        bindToController: true,\n        controller: function() {\n            this.bounds = this.task.di.Bounds[0].$;\n            this.type = 'user';\n            this.symbol = '#' + this.type + '-task';\n            if(this.task.di.BPMNLabel) {\n                this.label = this.task.di.BPMNLabel[0].Bounds[0].$;\n                this.label.x -= this.bounds.x;\n                this.label.y -= this.bounds.y;\n            } else {\n                // TODO: multiline labels (long texts: divide label)\n                var yLabel = this.bounds.height / 2;\n                this.label = { x: 10, y: yLabel, witdh: 80, height: 20 };\n            }\n        }\n    };\n});\n"],"sourceRoot":"/source/"}